🧩 Proyecto: Tienda Web (Frontend + Backend)
📖 Descripción general

Este proyecto es una aplicación web completa de tienda en línea, desarrollada con Django en el backend y React (Vite) en el frontend.
El objetivo es mostrar cómo integrar un sistema de productos con API REST y una interfaz moderna donde se visualicen los artículos disponibles, sus precios y descripciones.

⚙️ Estructura del proyecto
Proyect/
│
├── Unidad_1/   ← Backend con Django
│   ├── api/              → Aplicación principal (modelo Producto, vistas y rutas)
│   ├── config/           → Configuración del proyecto Django
│   ├── db.sqlite3        → Base de datos local
│   ├── manage.py         → Comando principal del servidor Django
│   └── requirements.txt  → Dependencias del backend
│
└── Unidad_2/   ← Frontend con React + Vite
    ├── src/
    │   ├── pages/        → Páginas como Home.jsx
    │   ├── components/   → Componentes reutilizables
    │   ├── App.jsx       → Estructura principal del frontend
    │   └── index.css     → Estilos globales
    ├── package.json      → Dependencias del frontend
    └── vite.config.js    → Configuración de desarrollo

🛠️ Tecnologías utilizadas
🔹 Backend (Unidad_1)

Django 5.2.7 → Framework principal para el servidor web.

Django REST Framework → Para construir la API que gestiona los productos.

SQLite3 → Base de datos local para almacenar los datos de productos.

🔹 Frontend (Unidad_2)

React (con Vite) → Framework moderno de JavaScript para crear interfaces rápidas.

Axios → Librería para conectar el frontend con la API del backend.

CSS modular → Para el diseño visual y estilos de los componentes.

🧮 Funcionalidades principales
🖥️ Frontend (Interfaz del usuario):

Muestra una lista de productos con:

Nombre

Descripción

Precio

Carga los datos dinámicamente desde la API del backend.

Diseño responsivo y adaptable.

⚙️ Backend (Servidor y API):

Proporciona endpoints RESTful:

GET /api/productos/ → Listar todos los productos.

POST /api/productos/ → Agregar nuevos productos.

Permite agregar productos desde el panel admin o la shell de Django.

Retorna los datos en formato JSON para que el frontend los consuma fácilmente.

💡 Ejemplo de datos (desde la API)
[
  {
    "id": 1,
    "nombre": "Camiseta",
    "precio": "199.99",
    "descripcion": "Camiseta de algodón"
  },
  {
    "id": 2,
    "nombre": "Pants",
    "precio": "249.50",
    "descripcion": "Pantalón cómodo"
  },
  {
    "id": 3,
    "nombre": "Gorra",
    "precio": "79.00",
    "descripcion": "Gorra ajustable"
  }
]

🚀 Cómo ejecutar el proyecto
🔧 1. Clonar el repositorio
git clone https://github.com/TU_USUARIO/programadores.git
cd Proyect

🖥️ 2. Ejecutar el backend (Unidad_1)
cd Unidad_1
python -m venv env
source env/bin/activate   # o env\Scripts\activate en Windows
pip install -r requirements.txt
python manage.py runserver


Servidor activo en:
👉 http://127.0.0.1:8000/api/productos/

🌐 3. Ejecutar el frontend (Unidad_2)

En otra terminal:

cd Unidad_2
npm install
npm run dev


Abrir en el navegador:
👉 http://localhost:5173

👨‍💻 Autores

Jorge López — Desarrollador principal del proyecto

Colaboradores: Compañeros del grupo de Programadores CECyTECH 47